#pragma once

#include <GL/gl.h>
#ifdef __APPLE__
#include <OpenGL/glu.h>
#else
#include <GL/glu.h>
#endif

#include <cassert>
#include <cmath>
#include <iostream>
#include <map>
#include <string>
#include <vector>

#include <QImage>

#include "./ScatterPlot.h"
#include "./utility/ScalarField.h"
#include "./utility/SurfaceMesh.h"
#include "./utility/Utility.h"

#include "GlobalConfig.h"

// @TODO This shouldn't be defined here.
enum SurfaceType {none, isosurface, fibersurface, combinedSurface};

class Data
{
  public:
    Data() {}
    GLfloat min, max;
    std::string longName, units;

    void saveTreeData(const std::string, const std::map<std::string, tv9k::utility::ScalarField>);
    int readTreeData(const std::string filename, std::map<std::string, tv9k::utility::ScalarField>& fields);

    // The mouse points for every pair of u,v scatterplot
    //std::map<std::pair<std::string, std::string>, QVector<QPointF>> mousePoints;

    QVector<QPointF> mousePoints;

    // Per timestep
    std::vector<tv9k::utility::SurfaceMesh> isosurfaceMeshes, fibersurfaceMeshes, combinedMeshes;

    // Signed disntace field generated by the fiber surface (to be used by the combined surface)
    std::vector<std::vector<std::vector<std::vector<GLfloat>>>> currentSignedDistanceField;

    // Compute all meshes for a given isovalue
    void computeMeshes(const GLfloat);

    void computeScatterplots(const size_t);

    void computeFiberMeshes(const GLfloat, const QVector<QPointF> polyPoints);

    void computeCombinedMeshes(const std::vector<std::vector<std::vector<GLfloat>>>, const GLfloat);


    // Original dimensions of the data before cropping and downsampling - used for
    // reference
    int originalXdim, originalYdim, originalZdim, originalTdim;

    // New dimensions after cropping and downsampling - used in the application
    int xdim, ydim, zdim, tdim;

    // Cached images of the scatterplot
    QImage scatterPlotImage;
    QImage grayScatterPlotImage;


    int currentTimestep = { 0 };

    // Values for the axis coordinates
    std::vector<float> xVals;
    std::vector<float> yVals;
    std::vector<float> zVals;
    std::vector<double> tVals;

    void readNcData(tv9k::InputInformation);

    // These should be somewhere else

    // @TODO Move these to a separate namespace for input data
    bool render3DLabels = false;
    bool drawLines = false;
    bool continuousScatterPlot = false;
    bool flatNormals = false;
    bool precomputeMergeTrees = false;
    bool cacheJoinTree = false;
    int projectionType = 2;
    bool dynamicPolygon = 2;

    std::vector<SurfaceType> selectedSurfaceType;
    std::vector<int> selectedID;
    std::vector<std::pair<std::vector<GLfloat>, std::vector<GLfloat>>> selectedObjectMinMax;
};
